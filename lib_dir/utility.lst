GAS LISTING /tmp/cceSw2RO.s 			page 1


   1               		.file	"utility.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/prophete/PROJETFINALINF1995/robot-poly/lib_dir/",100,0,4,.Ltext0
   8               		.stabs	"utility.cpp",100,0,4,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"__uint24:t(0,1)=@s24;r(0,1);0;077777777;",128,0,0,0
  13               		.stabs	"__int24:t(0,2)=@s24;r(0,2);040000000;037777777;",128,0,0,0
  14               		.stabs	"__builtin_va_list:t(0,3)=*(0,4)=(0,4)",128,0,0,0
  15               		.stabs	"complex long double:t(0,5)=R3;8;0;",128,0,0,0
  16               		.stabs	"complex double:t(0,6)=R3;8;0;",128,0,0,0
  17               		.stabs	"complex float:t(0,7)=R3;8;0;",128,0,0,0
  18               		.stabs	"complex int:t(0,8)=s4real:(0,9)=r(0,9);-32768;32767;,0,16;imag:(0,9),16,16;;",128,0,0,0
  19               		.stabs	"long long unsigned int:t(0,10)=@s64;r(0,10);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"long unsigned int:t(0,11)=@s32;r(0,11);0;037777777777;",128,0,0,0
  21               		.stabs	"unsigned int:t(0,12)=r(0,12);0;0177777;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  23               		.stabs	"long long int:t(0,14)=@s64;r(0,14);01000000000000000000000;0777777777777777777777;",128,0,
  24               		.stabs	"long int:t(0,15)=@s32;r(0,15);020000000000;017777777777;",128,0,0,0
  25               		.stabs	"int:t(0,9)",128,0,0,0
  26               		.stabs	"signed char:t(0,16)=@s8;r(0,16);-128;127;",128,0,0,0
  27               		.stabs	"char:t(0,17)=@s8;r(0,17);0;255;",128,0,0,0
  28               		.stabs	"signed:t(0,9)",128,0,0,0
  29               		.stabs	"unsigned long:t(0,11)",128,0,0,0
  30               		.stabs	"long long unsigned:t(0,10)",128,0,0,0
  31               		.stabs	"short int:t(0,18)=r(0,18);-32768;32767;",128,0,0,0
  32               		.stabs	"short unsigned int:t(0,19)=r(0,19);0;0177777;",128,0,0,0
  33               		.stabs	"unsigned short:t(0,19)",128,0,0,0
  34               		.stabs	"float:t(0,20)=r(0,9);4;0;",128,0,0,0
  35               		.stabs	"double:t(0,21)=r(0,9);4;0;",128,0,0,0
  36               		.stabs	"long double:t(0,22)=r(0,9);4;0;",128,0,0,0
  37               		.stabs	"short _Fract:t(0,23)=r(0,9);1;0;",128,0,0,0
  38               		.stabs	"long _Fract:t(0,24)=r(0,9);4;0;",128,0,0,0
  39               		.stabs	"long long _Fract:t(0,25)=r(0,9);8;0;",128,0,0,0
  40               		.stabs	"unsigned short _Fract:t(0,26)=r(0,9);1;0;",128,0,0,0
  41               		.stabs	"unsigned _Fract:t(0,27)=r(0,9);2;0;",128,0,0,0
  42               		.stabs	"unsigned long _Fract:t(0,28)=r(0,9);4;0;",128,0,0,0
  43               		.stabs	"unsigned long long _Fract:t(0,29)=r(0,9);8;0;",128,0,0,0
  44               		.stabs	"_Sat short _Fract:t(0,30)=r(0,9);1;0;",128,0,0,0
  45               		.stabs	"_Sat _Fract:t(0,31)=r(0,9);2;0;",128,0,0,0
  46               		.stabs	"_Sat long _Fract:t(0,32)=r(0,9);4;0;",128,0,0,0
  47               		.stabs	"_Sat long long _Fract:t(0,33)=r(0,9);8;0;",128,0,0,0
  48               		.stabs	"_Sat unsigned short _Fract:t(0,34)=r(0,9);1;0;",128,0,0,0
  49               		.stabs	"_Sat unsigned _Fract:t(0,35)=r(0,9);2;0;",128,0,0,0
  50               		.stabs	"_Sat unsigned long _Fract:t(0,36)=r(0,9);4;0;",128,0,0,0
  51               		.stabs	"_Sat unsigned long long _Fract:t(0,37)=r(0,9);8;0;",128,0,0,0
  52               		.stabs	"short _Accum:t(0,38)=r(0,9);2;0;",128,0,0,0
  53               		.stabs	"long _Accum:t(0,39)=r(0,9);8;0;",128,0,0,0
  54               		.stabs	"long long _Accum:t(0,40)=r(0,9);8;0;",128,0,0,0
  55               		.stabs	"unsigned short _Accum:t(0,41)=r(0,9);2;0;",128,0,0,0
  56               		.stabs	"unsigned _Accum:t(0,42)=r(0,9);4;0;",128,0,0,0
  57               		.stabs	"unsigned long _Accum:t(0,43)=r(0,9);8;0;",128,0,0,0
GAS LISTING /tmp/cceSw2RO.s 			page 2


  58               		.stabs	"unsigned long long _Accum:t(0,44)=r(0,9);8;0;",128,0,0,0
  59               		.stabs	"_Sat short _Accum:t(0,45)=r(0,9);2;0;",128,0,0,0
  60               		.stabs	"_Sat _Accum:t(0,46)=r(0,9);4;0;",128,0,0,0
  61               		.stabs	"_Sat long _Accum:t(0,47)=r(0,9);8;0;",128,0,0,0
  62               		.stabs	"_Sat long long _Accum:t(0,48)=r(0,9);8;0;",128,0,0,0
  63               		.stabs	"_Sat unsigned short _Accum:t(0,49)=r(0,9);2;0;",128,0,0,0
  64               		.stabs	"_Sat unsigned _Accum:t(0,50)=r(0,9);4;0;",128,0,0,0
  65               		.stabs	"_Sat unsigned long _Accum:t(0,51)=r(0,9);8;0;",128,0,0,0
  66               		.stabs	"_Sat unsigned long long _Accum:t(0,52)=r(0,9);8;0;",128,0,0,0
  67               		.stabs	"void:t(0,4)",128,0,0,0
  68               		.stabs	"wchar_t:t(0,53)=r(0,53);-32768;32767;",128,0,0,0
  69               		.stabs	"bool:t(0,54)=@s8;-16;",128,0,0,0
  70               		.stabs	"__vtbl_ptr_type:t(0,55)=*(0,56)=f(0,9)",128,0,0,0
  71               		.stabs	"decltype(nullptr):t(0,57)=(0,57)",128,0,0,0
  72               		.stabs	"int8_t:t(0,58)=(0,16)",128,0,121,0
  73               		.stabs	"uint8_t:t(0,59)=(0,13)",128,0,122,0
  74               		.stabs	"int16_t:t(0,60)=(0,9)",128,0,123,0
  75               		.stabs	"uint16_t:t(0,61)=(0,12)",128,0,124,0
  76               		.stabs	"int32_t:t(0,62)=(0,15)",128,0,125,0
  77               		.stabs	"uint32_t:t(0,63)=(0,11)",128,0,126,0
  78               		.stabs	"int64_t:t(0,64)=(0,14)",128,0,128,0
  79               		.stabs	"uint64_t:t(0,65)=(0,10)",128,0,129,0
  80               		.stabs	"intptr_t:t(0,66)=(0,60)",128,0,142,0
  81               		.stabs	"uintptr_t:t(0,67)=(0,61)",128,0,147,0
  82               		.stabs	"int_least8_t:t(0,68)=(0,58)",128,0,159,0
  83               		.stabs	"uint_least8_t:t(0,69)=(0,59)",128,0,164,0
  84               		.stabs	"int_least16_t:t(0,70)=(0,60)",128,0,169,0
  85               		.stabs	"uint_least16_t:t(0,71)=(0,61)",128,0,174,0
  86               		.stabs	"int_least32_t:t(0,72)=(0,62)",128,0,179,0
  87               		.stabs	"uint_least32_t:t(0,73)=(0,63)",128,0,184,0
  88               		.stabs	"int_least64_t:t(0,74)=(0,64)",128,0,192,0
  89               		.stabs	"uint_least64_t:t(0,75)=(0,65)",128,0,199,0
  90               		.stabs	"int_fast8_t:t(0,76)=(0,58)",128,0,213,0
  91               		.stabs	"uint_fast8_t:t(0,77)=(0,59)",128,0,218,0
  92               		.stabs	"int_fast16_t:t(0,78)=(0,60)",128,0,223,0
  93               		.stabs	"uint_fast16_t:t(0,79)=(0,61)",128,0,228,0
  94               		.stabs	"int_fast32_t:t(0,80)=(0,62)",128,0,233,0
  95               		.stabs	"uint_fast32_t:t(0,81)=(0,63)",128,0,238,0
  96               		.stabs	"int_fast64_t:t(0,82)=(0,64)",128,0,246,0
  97               		.stabs	"uint_fast64_t:t(0,83)=(0,65)",128,0,253,0
  98               		.stabs	"intmax_t:t(0,84)=(0,64)",128,0,273,0
  99               		.stabs	"uintmax_t:t(0,85)=(0,65)",128,0,278,0
 100               		.stabs	"int_farptr_t:t(0,86)=(0,62)",128,0,77,0
 101               		.stabs	"uint_farptr_t:t(0,87)=(0,63)",128,0,81,0
 102               		.stabs	"._0:Tt(0,88)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,240,0
 103               		.stabs	"__fuse_t:t(0,88)",128,0,244,0
 104               		.stabs	"Utility:Tt(0,89)=s1initialisationInterruption::(0,90)=#(0,89),(0,4),(0,91)=*(0,89),(0,4);:
 105               		.stabs	"_ZN7Utility26initialisationInterruptionEv:F(0,4)",36,0,4,_ZN7Utility26initialisationInterr
 106               		.stabs	"this:P(0,95)=k(0,91)",64,0,4,24
 107               	.global	_ZN7Utility26initialisationInterruptionEv
 108               		.type	_ZN7Utility26initialisationInterruptionEv, @function
 109               	_ZN7Utility26initialisationInterruptionEv:
 110               		.stabd	46,0,0
   1:utility.cpp   **** #include "utility.h"
   2:utility.cpp   **** 
   3:utility.cpp   **** 
   4:utility.cpp   **** void Utility::initialisationInterruption( void ) {
GAS LISTING /tmp/cceSw2RO.s 			page 3


 111               		.stabn	68,0,4,.LM0-.LFBB1
 112               	.LM0:
 113               	.LFBB1:
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 0 */
 117               	.L__stack_usage = 0
   5:utility.cpp   **** 
   6:utility.cpp   ****         // cli est une routine qui bloque toutes les interruptions.
   7:utility.cpp   ****         // Il serait bien mauvais d'etre interrompu alors que
   8:utility.cpp   ****         // le microcontroleur n'est pas pret...
   9:utility.cpp   ****         cli ();
 118               		.stabn	68,0,9,.LM1-.LFBB1
 119               	.LM1:
 120               	/* #APP */
 121               	 ;  9 "utility.cpp" 1
 122 0000 F894      		cli
 123               	 ;  0 "" 2
  10:utility.cpp   ****         //'modifier ici'
  11:utility.cpp   ****         // cette proc√©dure ajuste le registre EIMSK
  12:utility.cpp   ****         // de ATmega324PA pour permettre les interruptions externes
  13:utility.cpp   ****        EIMSK |= _BV(INT0);
 124               		.stabn	68,0,13,.LM2-.LFBB1
 125               	.LM2:
 126               	/* #NOAPP */
 127 0002 E89A      		sbi 0x1d,0
  14:utility.cpp   ****         // il faut sensibiliser les interruptions externes aux
  15:utility.cpp   ****         // changements de niveau du bouton-poussoir
  16:utility.cpp   ****         // en ajustant le registre EICRA
  17:utility.cpp   ****         EICRA |= (1 << ISC00);
 128               		.stabn	68,0,17,.LM3-.LFBB1
 129               	.LM3:
 130 0004 E9E6      		ldi r30,lo8(105)
 131 0006 F0E0      		ldi r31,0
 132 0008 8081      		ld r24,Z
 133 000a 8160      		ori r24,lo8(1)
 134 000c 8083      		st Z,r24
  18:utility.cpp   ****         // sei permet de recevoir a nouveau des interruptions.
  19:utility.cpp   ****         sei ();
 135               		.stabn	68,0,19,.LM4-.LFBB1
 136               	.LM4:
 137               	/* #APP */
 138               	 ;  19 "utility.cpp" 1
 139 000e 7894      		sei
 140               	 ;  0 "" 2
 141               	/* #NOAPP */
 142 0010 0895      		ret
 143               		.size	_ZN7Utility26initialisationInterruptionEv, .-_ZN7Utility26initialisationInterruptionEv
 144               	.Lscope1:
 145               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 146               		.stabd	78,0,0
 147               		.stabs	"_ZN7Utility19initialisationUSARTEv:F(0,4)",36,0,22,_ZN7Utility19initialisationUSARTEv
 148               		.stabs	"this:P(0,95)",64,0,22,24
 149               	.global	_ZN7Utility19initialisationUSARTEv
 150               		.type	_ZN7Utility19initialisationUSARTEv, @function
 151               	_ZN7Utility19initialisationUSARTEv:
 152               		.stabd	46,0,0
GAS LISTING /tmp/cceSw2RO.s 			page 4


  20:utility.cpp   **** }
  21:utility.cpp   **** 
  22:utility.cpp   **** void Utility::initialisationUSART ( void ) 
  23:utility.cpp   **** {
 153               		.stabn	68,0,23,.LM5-.LFBB2
 154               	.LM5:
 155               	.LFBB2:
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 0 */
 159               	.L__stack_usage = 0
  24:utility.cpp   **** 	// 2400 bauds. Nous vous donnons la valeur des deux
  25:utility.cpp   **** 	// premier registres pour vous √©viter des complications
  26:utility.cpp   **** 	UBRR0H = 0;
 160               		.stabn	68,0,26,.LM6-.LFBB2
 161               	.LM6:
 162 0012 1092 C500 		sts 197,__zero_reg__
  27:utility.cpp   **** 	UBRR0L = 0xCF;
 163               		.stabn	68,0,27,.LM7-.LFBB2
 164               	.LM7:
 165 0016 8FEC      		ldi r24,lo8(-49)
 166 0018 8093 C400 		sts 196,r24
  28:utility.cpp   **** 	// permettre la reception et la transmission par le UART0
  29:utility.cpp   **** 	//UCSR0A =  ;
  30:utility.cpp   **** 	// Set frame format to 8 data bits, no parity, 1 stop bit
  31:utility.cpp   ****         UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 167               		.stabn	68,0,31,.LM8-.LFBB2
 168               	.LM8:
 169 001c E2EC      		ldi r30,lo8(-62)
 170 001e F0E0      		ldi r31,0
 171 0020 8081      		ld r24,Z
 172 0022 8660      		ori r24,lo8(6)
 173 0024 8083      		st Z,r24
  32:utility.cpp   ****         //enable transmission and reception
  33:utility.cpp   ****         UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 174               		.stabn	68,0,33,.LM9-.LFBB2
 175               	.LM9:
 176 0026 E1EC      		ldi r30,lo8(-63)
 177 0028 F0E0      		ldi r31,0
 178 002a 8081      		ld r24,Z
 179 002c 8861      		ori r24,lo8(24)
 180 002e 8083      		st Z,r24
 181 0030 0895      		ret
 182               		.size	_ZN7Utility19initialisationUSARTEv, .-_ZN7Utility19initialisationUSARTEv
 183               	.Lscope2:
 184               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 185               		.stabd	78,0,0
 186               		.stabs	"_ZN7Utility17transmissionUSARTEh:F(0,4)",36,0,37,_ZN7Utility17transmissionUSARTEh
 187               		.stabs	"this:P(0,95)",64,0,37,24
 188               		.stabs	"donnee:P(0,59)",64,0,37,22
 189               	.global	_ZN7Utility17transmissionUSARTEh
 190               		.type	_ZN7Utility17transmissionUSARTEh, @function
 191               	_ZN7Utility17transmissionUSARTEh:
 192               		.stabd	46,0,0
  34:utility.cpp   **** }
  35:utility.cpp   **** 
  36:utility.cpp   **** // De l'USART vers le PC
GAS LISTING /tmp/cceSw2RO.s 			page 5


  37:utility.cpp   **** void Utility::transmissionUSART ( uint8_t donnee ) {
 193               		.stabn	68,0,37,.LM10-.LFBB3
 194               	.LM10:
 195               	.LFBB3:
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 0 */
 199               	.L__stack_usage = 0
 200               	.L5:
  38:utility.cpp   **** 	/* Wait for empty transmit buffer */
  39:utility.cpp   **** 	while ( !( UCSR0A & (1<<UDRE0)) );
 201               		.stabn	68,0,39,.LM11-.LFBB3
 202               	.LM11:
 203 0032 8091 C000 		lds r24,192
 204 0036 85FF      		sbrs r24,5
 205 0038 00C0      		rjmp .L5
  40:utility.cpp   **** 	/* Put data into buffer, sends the data */
  41:utility.cpp   **** 	UDR0 = donnee;
 206               		.stabn	68,0,41,.LM12-.LFBB3
 207               	.LM12:
 208 003a 6093 C600 		sts 198,r22
 209 003e 0895      		ret
 210               		.size	_ZN7Utility17transmissionUSARTEh, .-_ZN7Utility17transmissionUSARTEh
 211               	.Lscope3:
 212               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 213               		.stabd	78,0,0
 214               		.stabs	"_ZN7Utility13usart_receiveEv:F(0,13)",36,0,44,_ZN7Utility13usart_receiveEv
 215               		.stabs	"this:P(0,95)",64,0,44,24
 216               	.global	_ZN7Utility13usart_receiveEv
 217               		.type	_ZN7Utility13usart_receiveEv, @function
 218               	_ZN7Utility13usart_receiveEv:
 219               		.stabd	46,0,0
  42:utility.cpp   **** }
  43:utility.cpp   **** 
  44:utility.cpp   **** unsigned char Utility::usart_receive( void )
  45:utility.cpp   **** {
 220               		.stabn	68,0,45,.LM13-.LFBB4
 221               	.LM13:
 222               	.LFBB4:
 223               	/* prologue: function */
 224               	/* frame size = 0 */
 225               	/* stack size = 0 */
 226               	.L__stack_usage = 0
 227               	.L9:
 228               	.LBB8:
  46:utility.cpp   ****   unsigned char data;
  47:utility.cpp   ****   while ((UCSR0A & 0x80) == 0x00); // Wait for till the data arrives data
 229               		.stabn	68,0,47,.LM14-.LFBB4
 230               	.LM14:
 231 0040 8091 C000 		lds r24,192
 232 0044 87FF      		sbrs r24,7
 233 0046 00C0      		rjmp .L9
  48:utility.cpp   ****   data=UDR0;	// Read the data from UDR, as soon as the data arrives
 234               		.stabn	68,0,48,.LM15-.LFBB4
 235               	.LM15:
 236 0048 8091 C600 		lds r24,198
 237               	.LBE8:
GAS LISTING /tmp/cceSw2RO.s 			page 6


  49:utility.cpp   ****   return data;
  50:utility.cpp   **** }
 238               		.stabn	68,0,50,.LM16-.LFBB4
 239               	.LM16:
 240 004c 0895      		ret
 241               		.size	_ZN7Utility13usart_receiveEv, .-_ZN7Utility13usart_receiveEv
 242               		.stabs	"data:r(0,13)",64,0,46,24
 243               		.stabn	192,0,0,.LBB8-.LFBB4
 244               		.stabn	224,0,0,.LBE8-.LFBB4
 245               	.Lscope4:
 246               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 247               		.stabd	78,0,0
 248               		.stabs	"_ZN7Utility11USART_FlushEv:F(0,4)",36,0,53,_ZN7Utility11USART_FlushEv
 249               		.stabs	"this:P(0,95)",64,0,53,24
 250               	.global	_ZN7Utility11USART_FlushEv
 251               		.type	_ZN7Utility11USART_FlushEv, @function
 252               	_ZN7Utility11USART_FlushEv:
 253               		.stabd	46,0,0
  51:utility.cpp   **** 
  52:utility.cpp   **** 
  53:utility.cpp   **** void Utility::USART_Flush( void )
  54:utility.cpp   **** {
 254               		.stabn	68,0,54,.LM17-.LFBB5
 255               	.LM17:
 256               	.LFBB5:
 257               	/* prologue: function */
 258               	/* frame size = 0 */
 259               	/* stack size = 0 */
 260               	.L__stack_usage = 0
 261               	.L11:
 262               	.LBB9:
  55:utility.cpp   ****         unsigned char dummy;
  56:utility.cpp   ****         while ( UCSR0A & (1<<RXC0) )
 263               		.stabn	68,0,56,.LM18-.LFBB5
 264               	.LM18:
 265 004e 8091 C000 		lds r24,192
 266 0052 87FF      		sbrs r24,7
 267 0054 00C0      		rjmp .L13
  57:utility.cpp   ****         {
  58:utility.cpp   ****           dummy = UDR0;
 268               		.stabn	68,0,58,.LM19-.LFBB5
 269               	.LM19:
 270 0056 8091 C600 		lds r24,198
 271 005a 00C0      		rjmp .L11
 272               	.L13:
 273               	/* epilogue start */
 274               	.LBE9:
  59:utility.cpp   ****         }
  60:utility.cpp   **** }
 275               		.stabn	68,0,60,.LM20-.LFBB5
 276               	.LM20:
 277 005c 0895      		ret
 278               		.size	_ZN7Utility11USART_FlushEv, .-_ZN7Utility11USART_FlushEv
 279               		.stabs	"dummy:r(0,13)",64,0,55,24
 280               		.stabn	192,0,0,.LBB9-.LFBB5
 281               		.stabn	224,0,0,.LBE9-.LFBB5
 282               	.Lscope5:
GAS LISTING /tmp/cceSw2RO.s 			page 7


 283               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 284               		.stabd	78,0,0
 285               		.stabs	"_ZN7Utility16button1IsPressedEv:F(0,54)",36,0,62,_ZN7Utility16button1IsPressedEv
 286               		.stabs	"this:P(0,95)",64,0,62,24
 287               	.global	_ZN7Utility16button1IsPressedEv
 288               		.type	_ZN7Utility16button1IsPressedEv, @function
 289               	_ZN7Utility16button1IsPressedEv:
 290               		.stabd	46,0,0
  61:utility.cpp   **** 
  62:utility.cpp   **** bool Utility::button1IsPressed()
  63:utility.cpp   **** {
 291               		.stabn	68,0,63,.LM21-.LFBB6
 292               	.LM21:
 293               	.LFBB6:
 294               	/* prologue: function */
 295               	/* frame size = 0 */
 296               	/* stack size = 0 */
 297               	.L__stack_usage = 0
  64:utility.cpp   ****     if (!(bouton1PIN & bouton1ClearValue))
 298               		.stabn	68,0,64,.LM22-.LFBB6
 299               	.LM22:
 300 005e 4A99      		sbic 0x9,2
 301 0060 00C0      		rjmp .L16
 302               	.LBB10:
 303               	.LBB11:
 304               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext1
 305               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
GAS LISTING /tmp/cceSw2RO.s 			page 8


  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
GAS LISTING /tmp/cceSw2RO.s 			page 9


  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
GAS LISTING /tmp/cceSw2RO.s 			page 10


 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 306               		.stabn	68,0,164,.LM23-.LFBB6
 307               	.LM23:
 308 0062 8FE1      		ldi r24,lo8(19999)
 309 0064 9EE4      		ldi r25,hi8(19999)
 310 0066 0197      		1: sbiw r24,1
 311 0068 01F4      		brne 1b
 312 006a 00C0      		rjmp .
 313 006c 0000      		nop
 314               	.LBE11:
 315               	.LBE10:
 316               		.stabs	"utility.cpp",132,0,0,.Ltext2
 317               	.Ltext2:
  65:utility.cpp   ****     {
  66:utility.cpp   ****       _delay_ms(debounceTime);
  67:utility.cpp   ****       if(!(bouton1PIN & bouton1ClearValue))
 318               		.stabn	68,0,67,.LM24-.LFBB6
 319               	.LM24:
 320 006e 89B1      		in r24,0x9
 321 0070 82FB      		bst r24,2
 322 0072 8827      		clr r24
 323 0074 80F9      		bld r24,0
 324 0076 91E0      		ldi r25,lo8(1)
 325 0078 8927      		eor r24,r25
 326 007a 0895      		ret
 327               	.L16:
  68:utility.cpp   ****        {
  69:utility.cpp   ****           return true;
  70:utility.cpp   ****        }
  71:utility.cpp   ****     }
  72:utility.cpp   ****     return false;
 328               		.stabn	68,0,72,.LM25-.LFBB6
 329               	.LM25:
 330 007c 80E0      		ldi r24,0
  73:utility.cpp   **** }
 331               		.stabn	68,0,73,.LM26-.LFBB6
 332               	.LM26:
 333 007e 0895      		ret
GAS LISTING /tmp/cceSw2RO.s 			page 11


 334               		.size	_ZN7Utility16button1IsPressedEv, .-_ZN7Utility16button1IsPressedEv
 335               	.Lscope6:
 336               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 337               		.stabd	78,0,0
 338               		.stabs	"_ZN7Utility16button2IsPressedEv:F(0,54)",36,0,76,_ZN7Utility16button2IsPressedEv
 339               		.stabs	"this:P(0,95)",64,0,76,24
 340               	.global	_ZN7Utility16button2IsPressedEv
 341               		.type	_ZN7Utility16button2IsPressedEv, @function
 342               	_ZN7Utility16button2IsPressedEv:
 343               		.stabd	46,0,0
  74:utility.cpp   **** 
  75:utility.cpp   **** 
  76:utility.cpp   **** bool Utility::button2IsPressed()
  77:utility.cpp   **** {
 344               		.stabn	68,0,77,.LM27-.LFBB7
 345               	.LM27:
 346               	.LFBB7:
 347               	/* prologue: function */
 348               	/* frame size = 0 */
 349               	/* stack size = 0 */
 350               	.L__stack_usage = 0
  78:utility.cpp   ****     if (!(bouton2PIN & bouton2ClearValue))
 351               		.stabn	68,0,78,.LM28-.LFBB7
 352               	.LM28:
 353 0080 4999      		sbic 0x9,1
 354 0082 00C0      		rjmp .L19
 355               	.LBB12:
 356               	.LBB13:
 357               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext3
 358               	.Ltext3:
 359               		.stabn	68,0,164,.LM29-.LFBB7
 360               	.LM29:
 361 0084 8FE1      		ldi r24,lo8(19999)
 362 0086 9EE4      		ldi r25,hi8(19999)
 363 0088 0197      		1: sbiw r24,1
 364 008a 01F4      		brne 1b
 365 008c 00C0      		rjmp .
 366 008e 0000      		nop
 367               	.LBE13:
 368               	.LBE12:
 369               		.stabs	"utility.cpp",132,0,0,.Ltext4
 370               	.Ltext4:
  79:utility.cpp   ****     {
  80:utility.cpp   ****       _delay_ms(debounceTime);
  81:utility.cpp   ****       if(!(bouton2PIN & bouton2ClearValue))
 371               		.stabn	68,0,81,.LM30-.LFBB7
 372               	.LM30:
 373 0090 89B1      		in r24,0x9
 374 0092 8695      		lsr r24
 375 0094 8170      		andi r24,1
 376 0096 91E0      		ldi r25,lo8(1)
 377 0098 8927      		eor r24,r25
 378 009a 0895      		ret
 379               	.L19:
  82:utility.cpp   ****        {
  83:utility.cpp   ****           return true;
  84:utility.cpp   ****        }
GAS LISTING /tmp/cceSw2RO.s 			page 12


  85:utility.cpp   ****     }
  86:utility.cpp   ****     return false;
 380               		.stabn	68,0,86,.LM31-.LFBB7
 381               	.LM31:
 382 009c 80E0      		ldi r24,0
  87:utility.cpp   **** }
 383               		.stabn	68,0,87,.LM32-.LFBB7
 384               	.LM32:
 385 009e 0895      		ret
 386               		.size	_ZN7Utility16button2IsPressedEv, .-_ZN7Utility16button2IsPressedEv
 387               	.Lscope7:
 388               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 389               		.stabd	78,0,0
 390               		.stabs	"",100,0,0,.Letext0
 391               	.Letext0:
 392               		.ident	"GCC: (GNU) 4.8.2"
GAS LISTING /tmp/cceSw2RO.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 utility.cpp
     /tmp/cceSw2RO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cceSw2RO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cceSw2RO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cceSw2RO.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cceSw2RO.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cceSw2RO.s:109    .text:0000000000000000 _ZN7Utility26initialisationInterruptionEv
     /tmp/cceSw2RO.s:151    .text:0000000000000012 _ZN7Utility19initialisationUSARTEv
     /tmp/cceSw2RO.s:191    .text:0000000000000032 _ZN7Utility17transmissionUSARTEh
     /tmp/cceSw2RO.s:218    .text:0000000000000040 _ZN7Utility13usart_receiveEv
     /tmp/cceSw2RO.s:252    .text:000000000000004e _ZN7Utility11USART_FlushEv
     /tmp/cceSw2RO.s:289    .text:000000000000005e _ZN7Utility16button1IsPressedEv
     /tmp/cceSw2RO.s:342    .text:0000000000000080 _ZN7Utility16button2IsPressedEv

NO UNDEFINED SYMBOLS

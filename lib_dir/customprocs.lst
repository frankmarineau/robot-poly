GAS LISTING /tmp/ccwtXUct.s 			page 1


   1               		.file	"customprocs.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/prophete/PROJETFINALINF1995/robot-poly/lib_dir/",100,0,4,.Ltext0
   8               		.stabs	"customprocs.cpp",100,0,4,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"__uint24:t(0,1)=@s24;r(0,1);0;077777777;",128,0,0,0
  13               		.stabs	"__int24:t(0,2)=@s24;r(0,2);040000000;037777777;",128,0,0,0
  14               		.stabs	"__builtin_va_list:t(0,3)=*(0,4)=(0,4)",128,0,0,0
  15               		.stabs	"complex long double:t(0,5)=R3;8;0;",128,0,0,0
  16               		.stabs	"complex double:t(0,6)=R3;8;0;",128,0,0,0
  17               		.stabs	"complex float:t(0,7)=R3;8;0;",128,0,0,0
  18               		.stabs	"complex int:t(0,8)=s4real:(0,9)=r(0,9);-32768;32767;,0,16;imag:(0,9),16,16;;",128,0,0,0
  19               		.stabs	"long long unsigned int:t(0,10)=@s64;r(0,10);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"long unsigned int:t(0,11)=@s32;r(0,11);0;037777777777;",128,0,0,0
  21               		.stabs	"unsigned int:t(0,12)=r(0,12);0;0177777;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  23               		.stabs	"long long int:t(0,14)=@s64;r(0,14);01000000000000000000000;0777777777777777777777;",128,0,
  24               		.stabs	"long int:t(0,15)=@s32;r(0,15);020000000000;017777777777;",128,0,0,0
  25               		.stabs	"int:t(0,9)",128,0,0,0
  26               		.stabs	"signed char:t(0,16)=@s8;r(0,16);-128;127;",128,0,0,0
  27               		.stabs	"char:t(0,17)=@s8;r(0,17);0;255;",128,0,0,0
  28               		.stabs	"signed:t(0,9)",128,0,0,0
  29               		.stabs	"unsigned long:t(0,11)",128,0,0,0
  30               		.stabs	"long long unsigned:t(0,10)",128,0,0,0
  31               		.stabs	"short int:t(0,18)=r(0,18);-32768;32767;",128,0,0,0
  32               		.stabs	"short unsigned int:t(0,19)=r(0,19);0;0177777;",128,0,0,0
  33               		.stabs	"unsigned short:t(0,19)",128,0,0,0
  34               		.stabs	"float:t(0,20)=r(0,9);4;0;",128,0,0,0
  35               		.stabs	"double:t(0,21)=r(0,9);4;0;",128,0,0,0
  36               		.stabs	"long double:t(0,22)=r(0,9);4;0;",128,0,0,0
  37               		.stabs	"short _Fract:t(0,23)=r(0,9);1;0;",128,0,0,0
  38               		.stabs	"long _Fract:t(0,24)=r(0,9);4;0;",128,0,0,0
  39               		.stabs	"long long _Fract:t(0,25)=r(0,9);8;0;",128,0,0,0
  40               		.stabs	"unsigned short _Fract:t(0,26)=r(0,9);1;0;",128,0,0,0
  41               		.stabs	"unsigned _Fract:t(0,27)=r(0,9);2;0;",128,0,0,0
  42               		.stabs	"unsigned long _Fract:t(0,28)=r(0,9);4;0;",128,0,0,0
  43               		.stabs	"unsigned long long _Fract:t(0,29)=r(0,9);8;0;",128,0,0,0
  44               		.stabs	"_Sat short _Fract:t(0,30)=r(0,9);1;0;",128,0,0,0
  45               		.stabs	"_Sat _Fract:t(0,31)=r(0,9);2;0;",128,0,0,0
  46               		.stabs	"_Sat long _Fract:t(0,32)=r(0,9);4;0;",128,0,0,0
  47               		.stabs	"_Sat long long _Fract:t(0,33)=r(0,9);8;0;",128,0,0,0
  48               		.stabs	"_Sat unsigned short _Fract:t(0,34)=r(0,9);1;0;",128,0,0,0
  49               		.stabs	"_Sat unsigned _Fract:t(0,35)=r(0,9);2;0;",128,0,0,0
  50               		.stabs	"_Sat unsigned long _Fract:t(0,36)=r(0,9);4;0;",128,0,0,0
  51               		.stabs	"_Sat unsigned long long _Fract:t(0,37)=r(0,9);8;0;",128,0,0,0
  52               		.stabs	"short _Accum:t(0,38)=r(0,9);2;0;",128,0,0,0
  53               		.stabs	"long _Accum:t(0,39)=r(0,9);8;0;",128,0,0,0
  54               		.stabs	"long long _Accum:t(0,40)=r(0,9);8;0;",128,0,0,0
  55               		.stabs	"unsigned short _Accum:t(0,41)=r(0,9);2;0;",128,0,0,0
  56               		.stabs	"unsigned _Accum:t(0,42)=r(0,9);4;0;",128,0,0,0
  57               		.stabs	"unsigned long _Accum:t(0,43)=r(0,9);8;0;",128,0,0,0
GAS LISTING /tmp/ccwtXUct.s 			page 2


  58               		.stabs	"unsigned long long _Accum:t(0,44)=r(0,9);8;0;",128,0,0,0
  59               		.stabs	"_Sat short _Accum:t(0,45)=r(0,9);2;0;",128,0,0,0
  60               		.stabs	"_Sat _Accum:t(0,46)=r(0,9);4;0;",128,0,0,0
  61               		.stabs	"_Sat long _Accum:t(0,47)=r(0,9);8;0;",128,0,0,0
  62               		.stabs	"_Sat long long _Accum:t(0,48)=r(0,9);8;0;",128,0,0,0
  63               		.stabs	"_Sat unsigned short _Accum:t(0,49)=r(0,9);2;0;",128,0,0,0
  64               		.stabs	"_Sat unsigned _Accum:t(0,50)=r(0,9);4;0;",128,0,0,0
  65               		.stabs	"_Sat unsigned long _Accum:t(0,51)=r(0,9);8;0;",128,0,0,0
  66               		.stabs	"_Sat unsigned long long _Accum:t(0,52)=r(0,9);8;0;",128,0,0,0
  67               		.stabs	"void:t(0,4)",128,0,0,0
  68               		.stabs	"wchar_t:t(0,53)=r(0,53);-32768;32767;",128,0,0,0
  69               		.stabs	"bool:t(0,54)=@s8;-16;",128,0,0,0
  70               		.stabs	"__vtbl_ptr_type:t(0,55)=*(0,56)=f(0,9)",128,0,0,0
  71               		.stabs	"decltype(nullptr):t(0,57)=(0,57)",128,0,0,0
  72               		.stabs	"int8_t:t(0,58)=(0,16)",128,0,121,0
  73               		.stabs	"uint8_t:t(0,59)=(0,13)",128,0,122,0
  74               		.stabs	"int16_t:t(0,60)=(0,9)",128,0,123,0
  75               		.stabs	"uint16_t:t(0,61)=(0,12)",128,0,124,0
  76               		.stabs	"int32_t:t(0,62)=(0,15)",128,0,125,0
  77               		.stabs	"uint32_t:t(0,63)=(0,11)",128,0,126,0
  78               		.stabs	"int64_t:t(0,64)=(0,14)",128,0,128,0
  79               		.stabs	"uint64_t:t(0,65)=(0,10)",128,0,129,0
  80               		.stabs	"intptr_t:t(0,66)=(0,60)",128,0,142,0
  81               		.stabs	"uintptr_t:t(0,67)=(0,61)",128,0,147,0
  82               		.stabs	"int_least8_t:t(0,68)=(0,58)",128,0,159,0
  83               		.stabs	"uint_least8_t:t(0,69)=(0,59)",128,0,164,0
  84               		.stabs	"int_least16_t:t(0,70)=(0,60)",128,0,169,0
  85               		.stabs	"uint_least16_t:t(0,71)=(0,61)",128,0,174,0
  86               		.stabs	"int_least32_t:t(0,72)=(0,62)",128,0,179,0
  87               		.stabs	"uint_least32_t:t(0,73)=(0,63)",128,0,184,0
  88               		.stabs	"int_least64_t:t(0,74)=(0,64)",128,0,192,0
  89               		.stabs	"uint_least64_t:t(0,75)=(0,65)",128,0,199,0
  90               		.stabs	"int_fast8_t:t(0,76)=(0,58)",128,0,213,0
  91               		.stabs	"uint_fast8_t:t(0,77)=(0,59)",128,0,218,0
  92               		.stabs	"int_fast16_t:t(0,78)=(0,60)",128,0,223,0
  93               		.stabs	"uint_fast16_t:t(0,79)=(0,61)",128,0,228,0
  94               		.stabs	"int_fast32_t:t(0,80)=(0,62)",128,0,233,0
  95               		.stabs	"uint_fast32_t:t(0,81)=(0,63)",128,0,238,0
  96               		.stabs	"int_fast64_t:t(0,82)=(0,64)",128,0,246,0
  97               		.stabs	"uint_fast64_t:t(0,83)=(0,65)",128,0,253,0
  98               		.stabs	"intmax_t:t(0,84)=(0,64)",128,0,273,0
  99               		.stabs	"uintmax_t:t(0,85)=(0,65)",128,0,278,0
 100               		.stabs	"int_farptr_t:t(0,86)=(0,62)",128,0,77,0
 101               		.stabs	"uint_farptr_t:t(0,87)=(0,63)",128,0,81,0
 102               		.stabs	"._0:Tt(0,88)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,240,0
 103               		.stabs	"__fuse_t:t(0,88)",128,0,244,0
 104               		.stabs	"_Z9cp_strlenPKc:F(0,61)",36,0,30,_Z9cp_strlenPKc
 105               		.stabs	"str:P(0,89)=*(0,90)=k(0,17)",64,0,30,24
 106               	.global	_Z9cp_strlenPKc
 107               		.type	_Z9cp_strlenPKc, @function
 108               	_Z9cp_strlenPKc:
 109               		.stabd	46,0,0
   1:customprocs.cpp **** /*
   2:customprocs.cpp **** Custom procedures, mainly related to character arrays.
   3:customprocs.cpp **** Copyright (C) 2009  Philippe Proulx (philippe.proulx@polymtl.ca)
   4:customprocs.cpp **** 
   5:customprocs.cpp **** This program is free software: you can redistribute it and/or modify
GAS LISTING /tmp/ccwtXUct.s 			page 3


   6:customprocs.cpp **** it under the terms of the GNU Lesser General Public License as published by
   7:customprocs.cpp **** the Free Software Foundation, either version 3 of the License, or
   8:customprocs.cpp **** (at your option) any later version.
   9:customprocs.cpp **** 
  10:customprocs.cpp **** This program is distributed in the hope that it will be useful,
  11:customprocs.cpp **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:customprocs.cpp **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:customprocs.cpp **** GNU Lesser General Public License for more details.
  14:customprocs.cpp **** 
  15:customprocs.cpp **** You should have received a copy of the GNU Lesser General Public License
  16:customprocs.cpp **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:customprocs.cpp **** */
  18:customprocs.cpp **** 
  19:customprocs.cpp **** #include <avr/io.h>
  20:customprocs.cpp **** #include <util/delay.h>
  21:customprocs.cpp **** 
  22:customprocs.cpp **** #include "customprocs.h"
  23:customprocs.cpp **** 
  24:customprocs.cpp **** /**
  25:customprocs.cpp ****  * Longueur d'une chaîne ASCIIZ.
  26:customprocs.cpp ****  *
  27:customprocs.cpp ****  * @param str	Chaîne ASCIIZ
  28:customprocs.cpp ****  * @return	Longueur de la chaîne
  29:customprocs.cpp ****  */
  30:customprocs.cpp **** uint16_t cp_strlen(const char* str) {
 110               		.stabn	68,0,30,.LM0-.LFBB1
 111               	.LM0:
 112               	.LFBB1:
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
 117 0000 FC01      		movw r30,r24
 118 0002 3196      		adiw r30,1
 119               	.L3:
 120 0004 9F01      		movw r18,r30
 121 0006 281B      		sub r18,r24
 122 0008 390B      		sbc r19,r25
 123               	.LBB6:
  31:customprocs.cpp **** 	uint16_t i = '\0';
  32:customprocs.cpp **** 
  33:customprocs.cpp **** 	while (str[++i] != '\0');
 124               		.stabn	68,0,33,.LM1-.LFBB1
 125               	.LM1:
 126 000a 4191      		ld r20,Z+
 127 000c 4111      		cpse r20,__zero_reg__
 128 000e 00C0      		rjmp .L3
 129               	.LBE6:
  34:customprocs.cpp **** 
  35:customprocs.cpp **** 	return i;
  36:customprocs.cpp **** }
 130               		.stabn	68,0,36,.LM2-.LFBB1
 131               	.LM2:
 132 0010 C901      		movw r24,r18
 133 0012 0895      		ret
 134               		.size	_Z9cp_strlenPKc, .-_Z9cp_strlenPKc
 135               		.stabs	"i:r(0,61)",64,0,31,18
GAS LISTING /tmp/ccwtXUct.s 			page 4


 136               		.stabn	192,0,0,.LBB6-.LFBB1
 137               		.stabn	224,0,0,.LBE6-.LFBB1
 138               	.Lscope1:
 139               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 140               		.stabd	78,0,0
 141               		.section	.rodata.str1.1,"aMS",@progbits,1
 142               	.LC0:
 143 0000 3031 3233 		.string	"0123456789abcdef"
 143      3435 3637 
 143      3839 6162 
 143      6364 6566 
 143      00
 144               		.text
 145               		.stabs	"_Z7cp_itoaPcjh:F(0,91)=*(0,17)",36,0,46,_Z7cp_itoaPcjh
 146               		.stabs	"buf16:P(0,91)",64,0,46,30
 147               		.stabs	"val:P(0,61)",64,0,46,24
 148               		.stabs	"base:P(0,92)=k(0,59)",64,0,46,20
 149               	.global	_Z7cp_itoaPcjh
 150               		.type	_Z7cp_itoaPcjh, @function
 151               	_Z7cp_itoaPcjh:
 152               		.stabd	46,0,0
  37:customprocs.cpp **** 
  38:customprocs.cpp **** /**
  39:customprocs.cpp ****  * Réimplémentation d'un `itoa'.
  40:customprocs.cpp ****  *
  41:customprocs.cpp ****  * @param buf16		Buffer de 16 B à fournir
  42:customprocs.cpp ****  * @param val		Valeur NON signée à convertir
  43:customprocs.cpp ****  * @param base		Base de conversion (2 à 16)
  44:customprocs.cpp ****  * @return		Adresse de la chaîne obtenue
  45:customprocs.cpp ****  */
  46:customprocs.cpp **** char* cp_itoa(char* buf16, uint16_t val, const uint8_t base) {
 153               		.stabn	68,0,46,.LM3-.LFBB2
 154               	.LM3:
 155               	.LFBB2:
 156 0014 FF92      		push r15
 157 0016 0F93      		push r16
 158 0018 1F93      		push r17
 159 001a CF93      		push r28
 160 001c DF93      		push r29
 161               	/* prologue: function */
 162               	/* frame size = 0 */
 163               	/* stack size = 5 */
 164               	.L__stack_usage = 5
 165 001e FC01      		movw r30,r24
 166 0020 CB01      		movw r24,r22
 167               	.LBB7:
  47:customprocs.cpp **** 	uint8_t i = 14;
  48:customprocs.cpp **** 	buf16[i + 1] = 0;
 168               		.stabn	68,0,48,.LM4-.LFBB2
 169               	.LM4:
 170 0022 1786      		std Z+15,__zero_reg__
  49:customprocs.cpp **** 
  50:customprocs.cpp **** 	if (val == 0) {
 171               		.stabn	68,0,50,.LM5-.LFBB2
 172               	.LM5:
 173 0024 0097      		sbiw r24,0
 174 0026 01F4      		brne .L6
GAS LISTING /tmp/ccwtXUct.s 			page 5


  51:customprocs.cpp **** 		buf16[i] = '0';
 175               		.stabn	68,0,51,.LM6-.LFBB2
 176               	.LM6:
 177 0028 80E3      		ldi r24,lo8(48)
 178 002a 8687      		std Z+14,r24
  52:customprocs.cpp **** 		return &buf16[i];
 179               		.stabn	68,0,52,.LM7-.LFBB2
 180               	.LM7:
 181 002c CF01      		movw r24,r30
 182 002e 0E96      		adiw r24,14
 183 0030 00C0      		rjmp .L7
 184               	.L6:
 185 0032 EF01      		movw r28,r30
 186 0034 2F96      		adiw r28,15
  50:customprocs.cpp **** 	if (val == 0) {
 187               		.stabn	68,0,50,.LM8-.LFBB2
 188               	.LM8:
 189 0036 2EE0      		ldi r18,lo8(14)
 190 0038 F22E      		mov r15,r18
  53:customprocs.cpp **** 	}
  54:customprocs.cpp **** 
  55:customprocs.cpp **** 	for(; val && i; --i, val /= base) {
  56:customprocs.cpp **** 		buf16[i] = CP_HEX_CHARLIST[val % base];
 191               		.stabn	68,0,56,.LM9-.LFBB2
 192               	.LM9:
 193 003a 042F      		mov r16,r20
 194 003c 10E0      		ldi r17,0
 195               	.L9:
 196               		.stabn	68,0,56,.LM10-.LFBB2
 197               	.LM10:
 198 003e B801      		movw r22,r16
 199 0040 0E94 0000 		call __udivmodhi4
 200 0044 DC01      		movw r26,r24
 201 0046 A050      		subi r26,lo8(-(.LC0))
 202 0048 B040      		sbci r27,hi8(-(.LC0))
 203 004a 8C91      		ld r24,X
 204 004c 8A93      		st -Y,r24
  55:customprocs.cpp **** 	for(; val && i; --i, val /= base) {
 205               		.stabn	68,0,55,.LM11-.LFBB2
 206               	.LM11:
 207 004e FA94      		dec r15
 208 0050 CB01      		movw r24,r22
 209 0052 0097      		sbiw r24,0
 210 0054 01F0      		breq .L8
  55:customprocs.cpp **** 	for(; val && i; --i, val /= base) {
 211               		.stabn	68,0,55,.LM12-.LFBB2
 212               	.LM12:
 213 0056 F110      		cpse r15,__zero_reg__
 214 0058 00C0      		rjmp .L9
 215               	.L8:
  57:customprocs.cpp **** 	}
  58:customprocs.cpp **** 
  59:customprocs.cpp **** 	return &buf16[i + 1];
 216               		.stabn	68,0,59,.LM13-.LFBB2
 217               	.LM13:
 218 005a 8F2D      		mov r24,r15
 219 005c 90E0      		ldi r25,0
GAS LISTING /tmp/ccwtXUct.s 			page 6


 220 005e 0196      		adiw r24,1
 221 0060 8E0F      		add r24,r30
 222 0062 9F1F      		adc r25,r31
 223               	.L7:
 224               	/* epilogue start */
 225               	.LBE7:
  60:customprocs.cpp **** }
 226               		.stabn	68,0,60,.LM14-.LFBB2
 227               	.LM14:
 228 0064 DF91      		pop r29
 229 0066 CF91      		pop r28
 230 0068 1F91      		pop r17
 231 006a 0F91      		pop r16
 232 006c FF90      		pop r15
 233 006e 0895      		ret
 234               		.size	_Z7cp_itoaPcjh, .-_Z7cp_itoaPcjh
 235               		.stabs	"i:r(0,59)",64,0,47,15
 236               		.stabn	192,0,0,.LBB7-.LFBB2
 237               		.stabn	224,0,0,.LBE7-.LFBB2
 238               	.Lscope2:
 239               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 240               		.stabd	78,0,0
 241               		.stabs	"_Z10cp_wait_msj:F(0,4)",36,0,67,_Z10cp_wait_msj
 242               		.stabs	"ms:P(0,93)=k(0,61)",64,0,67,24
 243               	.global	_Z10cp_wait_msj
 244               		.type	_Z10cp_wait_msj, @function
 245               	_Z10cp_wait_msj:
 246               		.stabd	46,0,0
  61:customprocs.cpp **** 
  62:customprocs.cpp **** /**
  63:customprocs.cpp ****  * Attend un nombre de millisecondes.
  64:customprocs.cpp ****  *
  65:customprocs.cpp ****  * @param ms	Nombre de millisecondes à attendre.
  66:customprocs.cpp ****  */
  67:customprocs.cpp **** void cp_wait_ms(const uint16_t ms) {
 247               		.stabn	68,0,67,.LM15-.LFBB3
 248               	.LM15:
 249               	.LFBB3:
 250               	/* prologue: function */
 251               	/* frame size = 0 */
 252               	/* stack size = 0 */
 253               	.L__stack_usage = 0
 254               	.LBB8:
  68:customprocs.cpp **** 	uint16_t i;
  69:customprocs.cpp **** 
  70:customprocs.cpp **** 	for (i = 0; i < ms; ++i) {
 255               		.stabn	68,0,70,.LM16-.LFBB3
 256               	.LM16:
 257 0070 20E0      		ldi r18,0
 258 0072 30E0      		ldi r19,0
 259               	.L17:
 260               		.stabn	68,0,70,.LM17-.LFBB3
 261               	.LM17:
 262 0074 2817      		cp r18,r24
 263 0076 3907      		cpc r19,r25
 264 0078 01F0      		breq .L19
 265               	.LBB9:
GAS LISTING /tmp/ccwtXUct.s 			page 7


 266               	.LBB10:
 267               		.stabs	"/usr/lib/avr/include/util/delay.h",132,0,0,.Ltext1
 268               	.Ltext1:
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
GAS LISTING /tmp/ccwtXUct.s 			page 8


  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
GAS LISTING /tmp/ccwtXUct.s 			page 9


 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 269               		.stabn	68,0,164,.LM18-.LFBB3
 270               	.LM18:
 271 007a EFEC      		ldi r30,lo8(1999)
 272 007c F7E0      		ldi r31,hi8(1999)
GAS LISTING /tmp/ccwtXUct.s 			page 10


 273 007e 3197      		1: sbiw r30,1
 274 0080 01F4      		brne 1b
 275 0082 00C0      		rjmp .
 276 0084 0000      		nop
 277               	.LBE10:
 278               	.LBE9:
 279               		.stabs	"customprocs.cpp",132,0,0,.Ltext2
 280               	.Ltext2:
 281               		.stabn	68,0,70,.LM19-.LFBB3
 282               	.LM19:
 283 0086 2F5F      		subi r18,-1
 284 0088 3F4F      		sbci r19,-1
 285 008a 00C0      		rjmp .L17
 286               	.L19:
 287               	/* epilogue start */
 288               	.LBE8:
  71:customprocs.cpp **** 		_delay_ms(1.0);
  72:customprocs.cpp **** 	}
  73:customprocs.cpp **** }
 289               		.stabn	68,0,73,.LM20-.LFBB3
 290               	.LM20:
 291 008c 0895      		ret
 292               		.size	_Z10cp_wait_msj, .-_Z10cp_wait_msj
 293               		.stabs	"i:r(0,61)",64,0,68,18
 294               		.stabn	192,0,0,.LBB8-.LFBB3
 295               		.stabn	224,0,0,.LBE8-.LFBB3
 296               	.Lscope3:
 297               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 298               		.stabd	78,0,0
 299               		.stabs	"",100,0,0,.Letext0
 300               	.Letext0:
 301               		.ident	"GCC: (GNU) 4.8.2"
 302               	.global __do_copy_data
GAS LISTING /tmp/ccwtXUct.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 customprocs.cpp
     /tmp/ccwtXUct.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccwtXUct.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccwtXUct.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccwtXUct.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccwtXUct.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccwtXUct.s:108    .text:0000000000000000 _Z9cp_strlenPKc
     /tmp/ccwtXUct.s:151    .text:0000000000000014 _Z7cp_itoaPcjh
     /tmp/ccwtXUct.s:245    .text:0000000000000070 _Z10cp_wait_msj

UNDEFINED SYMBOLS
__udivmodhi4
__do_copy_data
